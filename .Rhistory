if(length(unique(phenotype))>2){
type<-"C"
}else{
type<-"D"
}
phenotype<-Read_Plink_FAM(bfile[3])[,6]
flag<-FALSE
if(!is.na(covariate)){
flag<-TRUE
fam<-Read_Plink_FAM(bfile[3])
covariate<-t(sapply(scan(covariate,"character",sep="\n"), function(x) strsplit(x, " ")[[1]]))
covariate<-covariate[match(fam[,1],covariate[,1]),][,-c(1)]
covariate<-apply(covariate, 2, function(x) as.numeric(x))
}
print(phenotype)
sInfo<-Open_SSD(SSD, INFO)
setIndex<-sInfo$SetInfo[,1]
if(is.na(n.sets)) n.sets<-length(setIndex)
if(length(unique(phenotype))>2){
type<-"C"
}else{
type<-"D"
}
type
if(!flag){
obj<-SKAT_Null_Model(phenotype ~ 1, out_type=type, n.Resampling=0,
type.Resampling="bootstrap", Adjustment=TRUE)
}else{
obj<-SKAT_Null_Model(phenotype ~ cov, out_type=type, n.Resampling=0,
type.Resampling="bootstrap", Adjustment=TRUE)
}
result<-SKAT.SSD.All(sInfo, obj)
flag
covariate
if(!flag){
obj<-SKAT_Null_Model(phenotype ~ 1, out_type=type, n.Resampling=0,
type.Resampling="bootstrap", Adjustment=TRUE)
}else{
obj<-SKAT_Null_Model(phenotype ~ covariate, out_type=type, n.Resampling=0,
type.Resampling="bootstrap", Adjustment=TRUE)
}
obj<-SKAT_Null_Model(phenotype ~ 1, out_type=type, n.Resampling=0,
type.Resampling="bootstrap", Adjustment=TRUE)
result<-SKAT.SSD.All(sInfo, obj)
to_be_evaluated<-ifelse(result$results$P.value < 0.5, 0, 1)
n.res=n.maxres / 10
if(n.res > 1.0e4) n.res <- 1.0e4
current_count<-0
pvalues<-sapply(1:length(to_be_evaluated), function(x) as.list(1))
flag<-FALSE
while(length(which(to_be_evaluated==0)) > 0 & current_count <= n.maxres){
if(!flag){
obj<-SKAT_Null_Model(phenotype ~ 1, out_type=type, n.Resampling=n.res,
type.Resampling="bootstrap", Adjustment=TRUE)
}else{
obj<-SKAT_Null_Model(phenotype ~ cov, out_type=type, n.Resampling=n.res,
type.Resampling="bootstrap", Adjustment=TRUE)
}
for(i in 1:length(to_be_evaluated)){
if(to_be_evaluated[i]==0){
temp<-SKAT.SSD.OneSet_SetIndex(sInfo, setIndex[i], obj)
pvalues[[i]]<-c(pvalues[[i]], temp$p.value.resampling)
if(current_count==0) pvalues[[i]]<-pvalues[[i]][-c(1)]
result$results[i,2]<-Get_Resampling_Pvalue_1(temp$p.value, pvalues[[i]])$p.value
if(temp$p.value==1) result$results[i,2]<-temp$p.value
if(length(which(temp$p.value > pvalues[[i]])) > n.maxres * significance_level / n.sets){
to_be_evaluated[i]<-1
}
current_count<-length(pvalues[[i]])
temp<-""
gc();gc();
}
}
}
n.maxres <- 1000
n.res=n.maxres / 10
if(n.res > 1.0e4) n.res <- 1.0e4
current_count<-0
pvalues<-sapply(1:length(to_be_evaluated), function(x) as.list(1))
while(length(which(to_be_evaluated==0)) > 0 & current_count <= n.maxres){
if(!flag){
obj<-SKAT_Null_Model(phenotype ~ 1, out_type=type, n.Resampling=n.res,
type.Resampling="bootstrap", Adjustment=TRUE)
}else{
obj<-SKAT_Null_Model(phenotype ~ cov, out_type=type, n.Resampling=n.res,
type.Resampling="bootstrap", Adjustment=TRUE)
}
for(i in 1:length(to_be_evaluated)){
if(to_be_evaluated[i]==0){
temp<-SKAT.SSD.OneSet_SetIndex(sInfo, setIndex[i], obj)
pvalues[[i]]<-c(pvalues[[i]], temp$p.value.resampling)
if(current_count==0) pvalues[[i]]<-pvalues[[i]][-c(1)]
result$results[i,2]<-Get_Resampling_Pvalue_1(temp$p.value, pvalues[[i]])$p.value
if(temp$p.value==1) result$results[i,2]<-temp$p.value
if(length(which(temp$p.value > pvalues[[i]])) > n.maxres * significance_level / n.sets){
to_be_evaluated[i]<-1
}
current_count<-length(pvalues[[i]])
}
}
gc();gc();
}
SNPSetID<-"snpset.txt"
bfile<-paste(hapmap3_r3_b36_fwd.consensus.qc.poly.remove.ch10, c("bed", "bim", "fam"), sep=".")
bfile<-paste("hapmap3_r3_b36_fwd.consensus.qc.poly.remove.ch10", c("bed", "bim", "fam"), sep=".")
significance_level / 20000
Generate_SSD_SetID(bfile[1], bfile[2], bfile[3], SNPSetID, SSD, INFO)
#install.packages("SKAT")
library(SKAT)
Generate_SSD_SetID(bfile[1], bfile[2], bfile[3], SNPSetID, SSD, INFO)
bfile[1]
ID<-
test
ID<-"test"
SSD<-paste(ID, ".SSD", sep="")
INFO<-paste(ID, ".Info", sep="")
Generate_SSD_SetID(bfile[1], bfile[2], bfile[3], SNPSetID, SSD, INFO)
0.05/806
x<-"6.203474e-05"
x<-as.numeric("6.203474e-05")
x
significance_level<-x
dnbinom(0, 7, .05)
conf_2<-0.05/20000
conf_1<-0.05/20000
seq(1:100)
dnbinom(0, seq(1:100), .05)
dnbinom(0, seq(1:100), .05) < conf_2
which(dnbinom(0, seq(1:100), .05) < conf_2)[1]
#install.packages("SKAT")
library(SKAT)
read.scan<-function(x, cut){
junk<-scan(x, "character", sep="\n")
p <- length(junk)
ID <- rep("---", p)
for(i in 1:p){
junk2<-unlist(strsplit(junk[i], cut))
score<-junk2[-c(1)]
ID[i]<-junk2[1]
if(i==1)book_n<-matrix(0, p, length(score))
book_n[i,]<-score
}
rownames(book_n)<-ID
colnames(book_n)<-scan(x, "character", sep=cut, nline=1)[-1]
return(book_n)
}
bfile<-"hapmap3_r3_b36_fwd.consensus.qc.poly.remove.ch10"
bfile<-paste(commandArgs(TRUE)[1], c("bed", "bim", "fam"), sep=".")
SNPSetID
#install.packages("SKAT")
library(SKAT)
read.scan<-function(x, cut){
junk<-scan(x, "character", sep="\n")
p <- length(junk)
ID <- rep("---", p)
for(i in 1:p){
junk2<-unlist(strsplit(junk[i], cut))
score<-junk2[-c(1)]
ID[i]<-junk2[1]
if(i==1)book_n<-matrix(0, p, length(score))
book_n[i,]<-score
}
rownames(book_n)<-ID
colnames(book_n)<-scan(x, "character", sep=cut, nline=1)[-1]
return(book_n)
}
###Generate SSD###
bfile<-paste(commandArgs(TRUE)[1], c("bed", "bim", "fam"), sep=".")
SNPSetID<-commandArgs(TRUE)[2]
significance_level<-as.numeric(commandArgs(TRUE)[3])
ID<-commandArgs(TRUE)[4]
n.maxres<-as.numeric(commandArgs(TRUE)[5])
covariate<-as.numeric(commandArgs(TRUE)[6])
conf_1<-as.numeric(commandArgs(TRUE)[7])
conf_2<-as.numeric(commandArgs(TRUE)[8])
SSD<-paste(ID, ".SSD", sep="")
INFO<-paste(ID, ".Info", sep="")
Generate_SSD_SetID(bfile[1], bfile[2], bfile[3], SNPSetID, SSD, INFO)
###Preparation of Generating obj###
INFO
commandArgs(TRUE)
bfile
bfile<-"hapmap3_r3_b36_fwd.consensus.qc.poly.remove.ch10"
SNPSetID<-"snpset.txt"
significance_level<-0.05/20000
ID<-"job"
n.maxres<-100000
conf_1<-0.05/20000
conf_2<-0.05/20000
SSD<-paste(ID, ".SSD", sep="")
INFO<-paste(ID, ".Info", sep="")
Generate_SSD_SetID(bfile[1], bfile[2], bfile[3], SNPSetID, SSD, INFO)
bfile
paste(bfile, c("bed", "bim", "fam"), sep=".")
bfile<-paste(bfile, c("bed", "bim", "fam"), sep=".")
Generate_SSD_SetID(bfile[1], bfile[2], bfile[3], SNPSetID, SSD, INFO)
list.files()
setwd("~/Dropbox/Research/Main/Tohoku/gwas/aSKAT/Production/aSKAT")
Generate_SSD_SetID(bfile[1], bfile[2], bfile[3], SNPSetID, SSD, INFO)
phenotype<-Read_Plink_FAM(bfile[3])[,6]
flag<-FALSE
if(!is.na(covariate)){
flag<-TRUE
fam<-Read_Plink_FAM(bfile[3])
covariate<-t(sapply(scan(covariate,"character",sep="\n"), function(x) strsplit(x, " ")[[1]]))
covariate<-covariate[match(fam[,1],covariate[,1]),][,-c(1)]
covariate<-apply(covariate, 2, function(x) as.numeric(x))
}
covariate
print(phenotype)
sInfo<-Open_SSD(SSD, INFO)
setIndex<-sInfo$SetInfo[,1]
###Continue / Binary###
if(length(unique(phenotype))>2){
type<-"C"
}else{
type<-"D"
}
###Main###
if(!flag){
obj<-SKAT_Null_Model(phenotype ~ 1, out_type=type, n.Resampling=0,
type.Resampling="bootstrap", Adjustment=TRUE)
}else{
obj<-SKAT_Null_Model(phenotype ~ covariate, out_type=type, n.Resampling=0,
type.Resampling="bootstrap", Adjustment=TRUE)
}
result<-SKAT.SSD.All(sInfo, obj)
to_be_evaluated<-ifelse(result$results$P.value < 0.5, 0, 1)
n.maxres
n.res=n.maxres / 10
if(n.res > 1.0e4) n.res <- 1.0e4
current_count<-0
pvalues<-sapply(1:length(to_be_evaluated), function(x) as.list(1))
while(length(which(to_be_evaluated==0)) > 0 & current_count <= n.maxres){
if(!flag){
obj<-SKAT_Null_Model(phenotype ~ 1, out_type=type, n.Resampling=n.res,
type.Resampling="bootstrap", Adjustment=TRUE)
}else{
obj<-SKAT_Null_Model(phenotype ~ cov, out_type=type, n.Resampling=n.res,
type.Resampling="bootstrap", Adjustment=TRUE)
}
th_2<-which(dnbinom(0, seq(1:100), .05) < conf_2)[1]
for(i in 1:length(to_be_evaluated)){
if(to_be_evaluated[i]==0){
temp<-SKAT.SSD.OneSet_SetIndex(sInfo, setIndex[i], obj)
pvalues[[i]]<-c(pvalues[[i]], temp$p.value.resampling)
if(current_count==0) pvalues[[i]]<-pvalues[[i]][-c(1)]
result$results[i,2]<-Get_Resampling_Pvalue_1(temp$p.value, pvalues[[i]])$p.value
if(temp$p.value==1) result$results[i,2]<-temp$p.value
#Stop Criterion: 1
if(length(which(temp$p.value > pvalues[[i]][1:th_2])) == th_2){
to_be_evaluated[i]<-1
#Stop Criterion: 2
}else if(length(which(temp$p.value < pvalues[[i]])) == length(pvalues[[i]])){
if(dnbinom(0, length(pvalues[[i]]), (1 - p_th_multi)) < conf_2){
to_be_evaluated[i]<-1
result$results[i,2]<-1/(length(pvalues[[i]]) + 1)
}
#Stop Criterion: 3
}else{
dif<-qnorm(p = conf_interval, mean = 0,
sd = sqrt(result$results[i,2] * (1 - result$results[i,2]) / length(pvalues[[i]])))
if(result$results[i,2] + dif > p_th_multi | result$results[i,2] - dif < significance_level){
to_be_evaluated[i]<-1
}
}
current_count<-length(pvalues[[i]])
}
}
gc();gc();
}
dif<-qnorm(p = conf_1, mean = 0,
sd = sqrt(result$results[i,2] * (1 - result$results[i,2]) / length(pvalues[[i]])))
if(result$results[i,2] + dif > p_th_multi | result$results[i,2] - dif < significance_level){
to_be_evaluated[i]<-1
}
if(result$results[i,2] + dif > significance_level | result$results[i,2] - dif < significance_level){
to_be_evaluated[i]<-1
}
}
current_count<-length(pvalues[[i]])
conf_1<-0.05
conf_2<-0.05
#install.packages("SKAT")
library(SKAT)
read.scan<-function(x, cut){
junk<-scan(x, "character", sep="\n")
p <- length(junk)
ID <- rep("---", p)
for(i in 1:p){
junk2<-unlist(strsplit(junk[i], cut))
score<-junk2[-c(1)]
ID[i]<-junk2[1]
if(i==1)book_n<-matrix(0, p, length(score))
book_n[i,]<-score
}
rownames(book_n)<-ID
colnames(book_n)<-scan(x, "character", sep=cut, nline=1)[-1]
return(book_n)
}
###Generate SSD###
bfile<-paste(commandArgs(TRUE)[1], c("bed", "bim", "fam"), sep=".")
SNPSetID<-commandArgs(TRUE)[2]
significance_level<-as.numeric(commandArgs(TRUE)[3])
ID<-commandArgs(TRUE)[4]
n.maxres<-as.numeric(commandArgs(TRUE)[5])
conf_1<-as.numeric(commandArgs(TRUE)[6])
conf_2<-as.numeric(commandArgs(TRUE)[7])
covariate<-as.numeric(commandArgs(TRUE)[8])
SSD<-paste(ID, ".SSD", sep="")
INFO<-paste(ID, ".Info", sep="")
Generate_SSD_SetID(bfile[1], bfile[2], bfile[3], SNPSetID, SSD, INFO)
###Preparation of Generating obj###
phenotype<-Read_Plink_FAM(bfile[3])[,6]
flag<-FALSE
if(!is.na(covariate)){
flag<-TRUE
fam<-Read_Plink_FAM(bfile[3])
covariate<-t(sapply(scan(covariate,"character",sep="\n"), function(x) strsplit(x, " ")[[1]]))
covariate<-covariate[match(fam[,1],covariate[,1]),][,-c(1)]
covariate<-apply(covariate, 2, function(x) as.numeric(x))
}
print(phenotype)
sInfo<-Open_SSD(SSD, INFO)
setIndex<-sInfo$SetInfo[,1]
###Continue / Binary###
if(length(unique(phenotype))>2){
type<-"C"
}else{
type<-"D"
}
###Main###
if(!flag){
obj<-SKAT_Null_Model(phenotype ~ 1, out_type=type, n.Resampling=0,
type.Resampling="bootstrap", Adjustment=TRUE)
}else{
obj<-SKAT_Null_Model(phenotype ~ covariate, out_type=type, n.Resampling=0,
type.Resampling="bootstrap", Adjustment=TRUE)
}
result<-SKAT.SSD.All(sInfo, obj)
to_be_evaluated<-ifelse(result$results$P.value < 0.5, 0, 1)
###Adaptive Procedure###
n.res=n.maxres / 10
if(n.res > 1.0e4) n.res <- 1.0e4
current_count<-0
pvalues<-sapply(1:length(to_be_evaluated), function(x) as.list(1))
while(length(which(to_be_evaluated==0)) > 0 & current_count <= n.maxres){
if(!flag){
obj<-SKAT_Null_Model(phenotype ~ 1, out_type=type, n.Resampling=n.res,
type.Resampling="bootstrap", Adjustment=TRUE)
}else{
obj<-SKAT_Null_Model(phenotype ~ cov, out_type=type, n.Resampling=n.res,
type.Resampling="bootstrap", Adjustment=TRUE)
}
th_2<-which(dnbinom(0, seq(1:100), .05) < conf_2)[1]
for(i in 1:length(to_be_evaluated)){
if(to_be_evaluated[i]==0){
temp<-SKAT.SSD.OneSet_SetIndex(sInfo, setIndex[i], obj)
pvalues[[i]]<-c(pvalues[[i]], temp$p.value.resampling)
if(current_count==0) pvalues[[i]]<-pvalues[[i]][-c(1)]
result$results[i,2]<-Get_Resampling_Pvalue_1(temp$p.value, pvalues[[i]])$p.value
if(temp$p.value==1) result$results[i,2]<-temp$p.value
#Stop Criterion: 1
if(length(which(temp$p.value > pvalues[[i]][1:th_2])) == th_2){
to_be_evaluated[i]<-1
#Stop Criterion: 2
}else if(length(which(temp$p.value < pvalues[[i]])) == length(pvalues[[i]])){
if(dnbinom(0, length(pvalues[[i]]), (1 - p_th_multi)) < conf_2){
to_be_evaluated[i]<-1
result$results[i,2]<-1/(length(pvalues[[i]]) + 1)
}
#Stop Criterion: 3
}else{
dif<-qnorm(p = conf_1, mean = 0,
sd = sqrt(result$results[i,2] * (1 - result$results[i,2]) / length(pvalues[[i]])))
if(result$results[i,2] + dif > significance_level | result$results[i,2] - dif < significance_level){
to_be_evaluated[i]<-1
}
}
current_count<-length(pvalues[[i]])
}
}
gc();gc();
}
###Write Results###
result<-result$results
rownames(result)<-sInfo$SetInfo[,2]
write.table(result, paste(commandArgs(TRUE)[1], "-", ID, ".txt", sep=""),
row.names=TRUE, col.names=TRUE, quote=FALSE, sep="\t")
Close_SSD()
warnings()
current_count
n.maxres
n.maxres
n.maxres<-1000000
bfile
aSKAT_bfile<-function(prefix, SNPSetID, significance_level, ID, n.maxres, conf_1, conf_2=conf_1, covariate){
###Generate SSD###
bfile<-paste(prefix, c("bed", "bim", "fam"), sep=".")
SSD<-paste(ID, ".SSD", sep="")
INFO<-paste(ID, ".Info", sep="")
Generate_SSD_SetID(bfile[1], bfile[2], bfile[3], SNPSetID, SSD, INFO)
###Preparation of Generating obj###
phenotype<-Read_Plink_FAM(bfile[3])[,6]
flag<-FALSE
if(!is.na(covariate)){
flag<-TRUE
fam<-Read_Plink_FAM(bfile[3])
covariate<-t(sapply(scan(covariate,"character",sep="\n"), function(x) strsplit(x, " ")[[1]]))
covariate<-covariate[match(fam[,1],covariate[,1]),][,-c(1)]
covariate<-apply(covariate, 2, function(x) as.numeric(x))
}
print(phenotype)
sInfo<-Open_SSD(SSD, INFO)
setIndex<-sInfo$SetInfo[,1]
###Continue / Binary###
if(length(unique(phenotype))>2){
type<-"C"
}else{
type<-"D"
}
###Main###
if(!flag){
obj<-SKAT_Null_Model(phenotype ~ 1, out_type=type, n.Resampling=0,
type.Resampling="bootstrap", Adjustment=TRUE)
}else{
obj<-SKAT_Null_Model(phenotype ~ covariate, out_type=type, n.Resampling=0,
type.Resampling="bootstrap", Adjustment=TRUE)
}
result<-SKAT.SSD.All(sInfo, obj)
to_be_evaluated<-ifelse(result$results$P.value < 0.5, 0, 1)
###Adaptive Procedure###
n.res=n.maxres / 10
if(n.res > 1.0e4) n.res <- 1.0e4
current_count<-0
pvalues<-sapply(1:length(to_be_evaluated), function(x) as.list(1))
while(length(which(to_be_evaluated==0)) > 0 & current_count <= n.maxres){
if(!flag){
obj<-SKAT_Null_Model(phenotype ~ 1, out_type=type, n.Resampling=n.res,
type.Resampling="bootstrap", Adjustment=TRUE)
}else{
obj<-SKAT_Null_Model(phenotype ~ covariate, out_type=type, n.Resampling=n.res,
type.Resampling="bootstrap", Adjustment=TRUE)
}
th_2<-which(dnbinom(0, seq(1:100), .05) < conf_2)[1]
for(i in 1:length(to_be_evaluated)){
if(to_be_evaluated[i]==0){
temp<-SKAT.SSD.OneSet_SetIndex(sInfo, setIndex[i], obj)
pvalues[[i]]<-c(pvalues[[i]], temp$p.value.resampling)
if(current_count==0) pvalues[[i]]<-pvalues[[i]][-c(1)]
result$results[i,2]<-Get_Resampling_Pvalue_1(temp$p.value, pvalues[[i]])$p.value
if(temp$p.value==1) result$results[i,2]<-temp$p.value
#Stop Criterion: 1
if(length(which(temp$p.value > pvalues[[i]][1:th_2])) == th_2){
to_be_evaluated[i]<-1
#Stop Criterion: 2
}else if(length(which(temp$p.value < pvalues[[i]])) == length(pvalues[[i]])){
if(dnbinom(0, length(pvalues[[i]]), (1 - significance_level)) < conf_2){
to_be_evaluated[i]<-1
result$results[i,2]<-1/(length(pvalues[[i]]) + 1)
}
#Stop Criterion: 3
}else{
dif<-qnorm(p = conf_1, mean = 0,
sd = sqrt(result$results[i,2] * (1 - result$results[i,2]) / length(pvalues[[i]])))
if(result$results[i,2] + dif > significance_level | result$results[i,2] - dif < significance_level){
to_be_evaluated[i]<-1
}
}
current_count<-length(pvalues[[i]])
}
}
gc();gc();
}
result<-result$results
rownames(result)<-sInfo$SetInfo[,2]
Close_SSD()
warnings()
return(result)
}
library(SKAT)
source("aSKAT_func.r")
5 / (0.05/20000)
library(SKAT)
source("aSKAT_func.r")
###Sample Run For All Genes Using bfile###
result<-aSKAT_bfile(prefix = "hapmap3_r3_b36_fwd.consensus.qc.poly.remove.ch10",
SNPSetID = "snpset.txt", significance_level = 0.05/20000,
ID = "job" , n.maxres = 5 / (0.05/20000))
library(SKAT)
source("aSKAT_func.r")
data(SKATBinary.example)
attach(SKATBinary.example)
result<-aSKAT_matrix(Z, y, significance_level = 0.05/20000, significance_level = 0.05/20000,
ID = "job" , n.maxres = 5 / (0.05/20000))
result<-aSKAT_matrix(Z, y, significance_level = 0.05/20000,
ID = "job" , n.maxres = 5 / (0.05/20000))
result
library(SKAT)
source("aSKAT_func.r")
aSKAT_bfile
ID
ID
bfile<-paste(prefix, c("bed", "bim", "fam"), sep=".")
aSKAT_matrix
#install.packages("SKAT")
library(SKAT)
source("aSKAT_func.r")
data(SKATBinary.example)
attach(SKATBinary.example)
result<-aSKAT_matrix(Z, y, significance_level = 0.05/20000,
ID = "job" , n.maxres = 5 / (0.05/20000))
